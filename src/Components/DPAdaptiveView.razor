@implements ITaggable

<div class="@GetContainerClass()">
    <CascadingValue Value="Context">@ChildContent</CascadingValue>
</div>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public ScreenSize RequiredSize { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public object? Tag { get; set; }

    [CascadingParameter]
    private UIContext ParentContext { get; set; } = new();

    private UIContext Context => ParentContext with { IsDisabled = ParentContext.IsDisabled || IsDisabled };

    private string GetContainerClass()
    {
        var classes = new List<string> { "relative" };

        switch (RequiredSize)
        {
             case ScreenSize.ExtraSmall:
                classes.Add("flex");
                classes.Add("space-x-4");
                break;
            case ScreenSize.Small:
                classes.Add("sm:flex");
                classes.Add("sm:space-x-4");
                classes.Add("not-sm:space-y-4");
                break;
            case ScreenSize.Medium:
                classes.Add("md:flex");
                classes.Add("md:space-x-4");
                classes.Add("not-md:space-y-4");
                break;
            case ScreenSize.Large:
                classes.Add("lg:flex");
                classes.Add("lg:space-x-4");
                classes.Add("not-lg:space-y-4");
                break;
            case ScreenSize.ExtraLarge:
                classes.Add("xl:flex");
                classes.Add("xl:space-x-4");
                classes.Add("not-xl:space-y-4");
                break;
            case ScreenSize.ExtraExtraLarge:
                classes.Add("2xl:flex");
                classes.Add("2xl:space-x-4");
                classes.Add("not-2xl:space-y-4");
                break;
        }

        return string.Join(" ", classes);
    }
}
