@implements ITaggable

<div class="@BuildClasses()">
    <CascadingValue Value="Context">
        @ChildContent
    </CascadingValue>
</div>

@code {
    [Parameter]
    public ScreenSize? FromSize { get; set; }

    [Parameter]
    public ScreenSize? ToSize { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public object? Tag { get; set; }

    [CascadingParameter]
    private UIContext ParentContext { get; set; } = new();

    private UIContext Context => ParentContext with { IsDisabled = ParentContext.IsDisabled || IsDisabled };

    private string BuildClasses()
    {
        var classes = new List<string> { "relative" };

        if (FromSize is null)
        {
            classes.Add("block");

            if (ToSize is not null)
            {
                classes.Add(ToSize switch
                {
                    ScreenSize.Small => "sm:hidden",
                    ScreenSize.Medium => "md:hidden",
                    ScreenSize.Large => "lg:hidden",
                    ScreenSize.ExtraLarge => "xl:hidden",
                    ScreenSize.ExtraExtraLarge => "2xl:hidden",
                    _ => ""
                });
            }
        }
        else
        {
            classes.Add("hidden");
            classes.Add(FromSize switch
            {
                ScreenSize.Small => "sm:block",
                ScreenSize.Medium => "md:block",
                ScreenSize.Large => "lg:block",
                ScreenSize.ExtraLarge => "xl:block",
                ScreenSize.ExtraExtraLarge => "2xl:block",
                _ => string.Empty
            });

            if (ToSize is not null)
            {
                classes.Add(ToSize switch
                {
                    ScreenSize.Small => "sm:hidden",
                    ScreenSize.Medium => "md:hidden",
                    ScreenSize.Large => "lg:hidden",
                    ScreenSize.ExtraLarge => "xl:hidden",
                    ScreenSize.ExtraExtraLarge => "2xl:hidden",
                    _ => string.Empty
                });
            }
        }

        return string.Join(" ", classes.Where(c => !string.IsNullOrWhiteSpace(c)));
    }
}
