@implements ITaggable

<div class="space-y-3 @WidthClass">
    <button class="@ButtonClass @WidthClass" disabled="@(Context.IsDisabled)" ontouchstart="" @onclick="OnClickAsync">
        @if (IsLoading)
        {
            <span class="relative opacity-0">
                <CascadingValue Value="Context">@ChildContent</CascadingValue>
            </span>
            <img src="/_content/ChatAIze.DopamineUI/img/loading.gif" height="24" width="24" class="absolute opacity-100 dark:opacity-0" />
            <img src="/_content/ChatAIze.DopamineUI/img/loading-dark.gif" height="24" width="24" class="absolute opacity-0 dark:opacity-100" />
        }
        else
        {
            <CascadingValue Value="Context">@ChildContent</CascadingValue>
        }
    </button>
    @if (!string.IsNullOrWhiteSpace(Caption))
    {
        <div class="@CaptionClass">@Caption</div>
    }
</div>

@code {
    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string? Caption { get; set; }

    [Parameter]
    public ButtonStyle Style { get; set; }

    [Parameter]
    public bool? IsFullWidth { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public EventCallback Clicked { get; set; }

    [Parameter]
    public object? Tag { get; set; }

    [CascadingParameter]
    private UIContext ParentContext { get; set; } = new();

    private UIContext Context => ParentContext with { IsDisabled = ParentContext.IsDisabled || IsLoading || IsDisabled };

    private string ButtonClass
    {
        get
        {
            if (IsLoading)
            {
                if (Style == ButtonStyle.Rounded)
                {
                    return "dp-button-rounded-loading";
                }

                return "dp-button-loading";
            }

            if (Context.IsDisabled)
            {
                if (Style == ButtonStyle.Rounded)
                {
                    return "dp-button-rounded-disabled";
                }

                return "dp-button-disabled";
            }

            return Style switch
            {
                ButtonStyle.Rounded => "dp-button-rounded",
                ButtonStyle.Borderless => "dp-button-borderless",
                ButtonStyle.Light => "dp-button-light",
                ButtonStyle.Primary => "dp-button-primary",
                ButtonStyle.Accent => "dp-button-accent",
                ButtonStyle.Danger => "dp-button-danger",
                ButtonStyle.Destructive => "dp-button-destructive",
                _ => "dp-button"
            };
        }
    }

    private string CaptionClass => Context.IsDisabled ? "dp-caption-disabled px-3" : "dp-caption px-3";

    private string WidthClass
    {
        get
        {
            if (IsFullWidth == true)
            {
                return "w-full min-w-fit";
            }

            if (IsFullWidth == false)
            {
                return "w-fit";
            }

            return "w-full sm:w-fit min-w-fit";
        }
    }

    private async Task OnClickAsync()
    {
        if (!Context.IsDisabled && Clicked.HasDelegate)
        {
            await Clicked.InvokeAsync();
        }
    }
}
