<button class="@ActualStyle" disabled="@IsDisabled" @onclick="OnClickAsync">
    @if (IsLoading)
    {
        <span class="opacity-0">@Text</span>
        <img src="/_content/ChatAIze.DopamineUI/img/loading.gif" height="24" width="24" class="absolute" />
    }
    else
    {
        @Text
    }
</button>

@code {
    private const string BaseStyle = "flex justify-center px-3 py-2 font-semibold text-center transition-all duration-300 ease-in-out border rounded-lg shadow-sm";

    private const string DefaultStyle = BaseStyle + " bg-neutral-100 dark:bg-neutral-800 dark:hover:bg-neutral-700 dark:active:bg-neutral-600 dark:border-neutral-700 dark:active:border-neutral-600 dark:text-white hover:bg-neutral-200 active:bg-neutral-300 border-neutral-200 active:border-neutral-300 hover:scale-105 active:scale-95";

    private const string AccentStyle = BaseStyle + " text-white bg-blue-600 border-blue-700 dark:hover:border-blue-700 dark:active:border-blue-800 dark:border-blue-500 hover:bg-blue-700 active:bg-blue-800 active:border-blue-800 hover:scale-105 active:scale-95";

    private const string DestructionStyle = BaseStyle + " text-white bg-red-600 border-red-700 dark:border-red-500 dark:hover:border-red-700 dark:active:border-red-800 hover:bg-red-700 active:bg-red-800 active:border-red-800 hover:scale-105 active:scale-95";

    private const string LoadingStyle = BaseStyle + " cursor-wait bg-neutral-50 dark:bg-neutral-800 dark:border-neutral-800 animate-pulse";

    private const string DisabledStyle = BaseStyle + " cursor-not-allowed bg-neutral-50 dark:bg-neutral-800 dark:border-neutral-800 text-neutral-400 dark:text-neutral-500 border-neutral-100";

    [Parameter]
    public string? Text { get; set; } = "Button";

    [Parameter]
    public ButtonStyle Style { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public EventCallback Clicked { get; set; }

    private string ActualStyle
    {
        get
        {
            if (IsLoading)
            {
                return LoadingStyle;
            }

            if (IsDisabled)
            {
                return DisabledStyle;
            }

            return Style switch
            {
                ButtonStyle.Accent => AccentStyle,
                ButtonStyle.Destructive => DestructionStyle,
                _ => DefaultStyle
            };
        }
    }

    private async Task OnClickAsync()
    {
        if (!IsLoading && !IsDisabled && Clicked.HasDelegate)
        {
            await Clicked.InvokeAsync();
        }
    }
}
