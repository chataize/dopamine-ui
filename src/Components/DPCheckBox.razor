<label for="@_id" class="@LabelClass @BorderClass @WidthClass">
    <input id="@_id" type="checkbox" disabled="@IsDisabled" hidden @bind="InternalValue" />
    <div class="@SquareClass">
        <svg class="sm:hidden" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="20" height="20" viewBox="0 0 30 30">
            <path d="M 26.980469 5.9902344 A 1.0001 1.0001 0 0 0 26.292969 6.2929688 L 11 21.585938 L 4.7070312 15.292969 A 1.0001 1.0001 0 1 0 3.2929688 16.707031 L 10.292969 23.707031 A 1.0001 1.0001 0 0 0 11.707031 23.707031 L 27.707031 7.7070312 A 1.0001 1.0001 0 0 0 26.980469 5.9902344 z"></path>
        </svg>
        <svg class="-sm:hidden" xmlns="http://www.w3.org/2000/svg" x="0px" y="0px" width="16" height="16" viewBox="0 0 30 30">
            <path d="M 26.980469 5.9902344 A 1.0001 1.0001 0 0 0 26.292969 6.2929688 L 11 21.585938 L 4.7070312 15.292969 A 1.0001 1.0001 0 1 0 3.2929688 16.707031 L 10.292969 23.707031 A 1.0001 1.0001 0 0 0 11.707031 23.707031 L 27.707031 7.7070312 A 1.0001 1.0001 0 0 0 26.980469 5.9902344 z"></path>
        </svg>
    </div>
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <span>@Label</span>
    }
</label>

@code {
    private readonly string _id = Random.Shared.Next().ToString();

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public bool Value { get; set; }

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }

    [Parameter]
    public bool? IsBorderless { get; set; }

    [Parameter]
    public bool? IsFullWidth { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public object? Tag { get; set; }

    private bool InternalValue
    {
        get => Value;
        set
        {
            if (!IsDisabled && Value != value)
            {
                Value = value;

                if (ValueChanged.HasDelegate)
                {
                    ValueChanged.InvokeAsync(value);
                }
            }
        }
    }

    private string LabelClass => IsDisabled ? "dp-checkbox-label-disabled group" : "dp-checkbox-label-enabled group";

    private string BorderClass
    {
        get
        {
            if (IsBorderless == false)
            {
                return IsDisabled ? "dp-frame-disabled" : "dp-frame-enabled";
            }

            if (IsBorderless == true || string.IsNullOrWhiteSpace(Label))
            {
                return string.Empty;
            }

            return IsDisabled ? "-sm:dp-frame-disabled" : "-sm:dp-frame-enabled";
        }
    }

    private string SquareClass
    {
        get
        {
            if (IsDisabled)
            {
                return Value ? "dp-checkbox-container-disabled-on group" : "dp-checkbox-container-disabled-off group";
            }

            return Value ? "dp-checkbox-container-on group" : "dp-checkbox-container-off group";
        }
    }

    private string WidthClass
    {
        get
        {
            if (IsFullWidth == true)
            {
                return "w-full";
            }

            if (IsFullWidth == false || string.IsNullOrWhiteSpace(Label))
            {
                return "w-fit";
            }

            return "w-full sm:w-fit";
        }
    }
}
