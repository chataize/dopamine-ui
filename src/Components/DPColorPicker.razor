@implements ITaggable

<div class="space-y-3">
    <div class="space-y-2">
        @if (!string.IsNullOrWhiteSpace(Label))
        {
            <label class="dp-label-base">
                <span class="@LabelClass">@Label</span>
                <span class="@EditIndicatorClass">‚óè</span>
            </label>
        }
        <div class="dp-color-picker-row @WidthClass">
            <button class="@GetColorClass(TailwindColor.Red)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Red)" />
            <button class="@GetColorClass(TailwindColor.Orange)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Orange)" />
            <button class="@GetColorClass(TailwindColor.Yellow)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Yellow)" />
            <button class="@GetColorClass(TailwindColor.Lime)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Lime)" />
            <button class="@GetColorClass(TailwindColor.Green)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Green)" />
            <button class="@GetColorClass(TailwindColor.Cyan)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Cyan)" />
            <button class="@GetColorClass(TailwindColor.Blue)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Blue)" />
            <button class="@GetColorClass(TailwindColor.Violet)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Violet)" />
            <button class="@GetColorClass(TailwindColor.Purple)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Purple)" />
            <button class="@GetColorClass(TailwindColor.Pink)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Pink)" />
        </div>
        <div class="dp-color-picker-row-compact">
            <button class="@GetColorClass(TailwindColor.Red)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Red)" />
            <button class="@GetColorClass(TailwindColor.Orange)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Orange)" />
            <button class="@GetColorClass(TailwindColor.Yellow)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Yellow)" />
            <button class="@GetColorClass(TailwindColor.Lime)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Lime)" />
            <button class="@GetColorClass(TailwindColor.Green)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Green)" />
        </div>
        <div class="dp-color-picker-row-compact">
            <button class="@GetColorClass(TailwindColor.Cyan)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Cyan)" />
            <button class="@GetColorClass(TailwindColor.Blue)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Blue)" />
            <button class="@GetColorClass(TailwindColor.Violet)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Violet)" />
            <button class="@GetColorClass(TailwindColor.Purple)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Purple)" />
            <button class="@GetColorClass(TailwindColor.Pink)" disabled="@Context.IsDisabled" @onclick="() => SelectColorAsync(TailwindColor.Pink)" />
        </div>
    </div>
    @if (!string.IsNullOrWhiteSpace(Caption))
    {
        <div class="@CaptionClass">@Caption</div>
    }
</div>

@code {
    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? Caption { get; set; }

    [Parameter]
    public TailwindColor? Value { get; set; }

    [Parameter]
    public EventCallback<TailwindColor> ValueChanged { get; set; }

    [Parameter]
    public bool? IsFullWidth { get; set; }

    [Parameter]
    public bool IsEdited { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public object? Tag { get; set; }

    [CascadingParameter]
    private UIContext ParentContext { get; set; } = new();

    private UIContext Context => ParentContext with { IsDisabled = ParentContext.IsDisabled || IsDisabled };

    private string LabelClass => Context.IsDisabled ? "dp-label-disabled" : "dp-label";

    private string EditIndicatorClass
    {
        get
        {
            if (IsEdited)
            {
                return Context.IsDisabled ? "dp-edit-indicator-disabled" : "dp-edit-indicator";
            }

            return "dp-edit-indicator-inactive";
        }
    }

    private string CaptionClass => Context.IsDisabled ? "dp-caption-disabled px-3" : "dp-caption px-3";

    private string WidthClass
    {
        get
        {
            if (IsFullWidth == true)
            {
                return "w-full min-w-fit";
            }

            if (IsFullWidth == false)
            {
                return "w-fit";
            }

            return "w-full sm:w-fit min-w-fit";
        }
    }

    private static string GetColorName(TailwindColor color)
    {
        return color switch
        {
            TailwindColor.Red => "red",
            TailwindColor.Orange => "orange",
            TailwindColor.Yellow => "yellow",
            TailwindColor.Green => "green",
            TailwindColor.Lime => "lime",
            TailwindColor.Cyan => "cyan",
            TailwindColor.Blue => "blue",
            TailwindColor.Violet => "violet",
            TailwindColor.Purple => "purple",
            TailwindColor.Pink => "pink",
            _ => throw new ArgumentOutOfRangeException(nameof(color), color, "Invalid color.")
        };
    }

    private string GetColorClass(TailwindColor color)
    {
        var colorName = GetColorName(color);

        if (Value == color)
        {
            if (Context.IsDisabled)
            {
                return $"dp-color-picker-color-selected-disabled bg-{colorName}-200 outline-{colorName}-200 dark:bg-{colorName}-900 dark:outline-{colorName}-900";
            }

            return $"dp-color-picker-color-selected bg-{colorName}-500 outline-{colorName}-500";
        }

        if (Context.IsDisabled)
        {
            return $"dp-color-picker-color-disabled bg-{colorName}-200 dark:bg-{colorName}-900";
        }

        return $"dp-color-picker-color bg-{colorName}-500";
    }

    private async Task SelectColorAsync(TailwindColor color)
    {
        if (!Context.IsDisabled && Value != color)
        {
            Value = color;
            await ValueChanged.InvokeAsync(color);
        }
    }
}
