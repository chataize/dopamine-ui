<div class="relative select-none @ActualWidth">
    @if (!String.IsNullOrWhiteSpace(Label))
    {
        <label for="@_id" class="label-base">
            <span class="@ActualLabelStyle">@Label</span>
            <span class="@ActualEditIndicatorStyle">â€¢</span>
            <span class="@ActualEditIndicatorStyle">EDITED</span>
        </label>
    }
    <button id="@_id" class="@ActualDropdownButtonStyle @ActualWidth" @onclick="Toggle">
        <span>@SelectionDisplay</span>
        @if (IsLoading)
        {
            <img src="/_content/ChatAIze.DopamineUI/img/loading-dark.gif" height="20" width="20" class="hidden dark:inline" />
            <img src="/_content/ChatAIze.DopamineUI/img/loading.gif" height="20" width="20" class="dark:hidden" />
        }
        else
        {
            <svg class="transition-all duration-300 ease-in-out @(_isExpanded ? "-rotate-180" : "rotate-0")" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="20px" height="20px" viewBox="0,0,256,256">
                <g fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" style="mix-blend-mode: normal">
                    <g transform="scale(8.53333,8.53333)">
                        <path d="M24.99023,8.98633c-0.26377,0.00624 -0.51439,0.11645 -0.69727,0.30664l-9.29297,9.29297l-9.29297,-9.29297c-0.18827,-0.19353 -0.4468,-0.30272 -0.7168,-0.30273c-0.40692,0.00011 -0.77321,0.24676 -0.92633,0.62377c-0.15312,0.37701 -0.06255,0.80921 0.22907,1.09303l10,10c0.39053,0.39037 1.02353,0.39037 1.41406,0l10,-10c0.29724,-0.28583 0.38857,-0.7248 0.23,-1.10546c-0.15857,-0.38066 -0.53454,-0.62497 -0.94679,-0.61524z"></path>
                    </g>
                </g>
            </svg>
        }
    </button>
    <div class="@ActualCalendarStyle">
        <div class="flex items-center justify-between space-x-4 font-semibold">
            <button class="@ActualPreviousMonthButtonStyle" @onclick="PreviousMonth">
                <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="20px" height="20px" viewBox="0,0,256,256">
                    <g fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" style="mix-blend-mode: normal">
                        <g transform="scale(3.55556,3.55556)">
                            <path d="M46.023,59.542c-1.008,0 -2.016,-0.378 -2.794,-1.137l-20.046,-19.561c-0.771,-0.752 -1.206,-1.785 -1.206,-2.863c0,-1.078 0.435,-2.11 1.206,-2.863l20.007,-19.522c1.582,-1.542 4.113,-1.512 5.657,0.069c1.542,1.581 1.512,4.114 -0.069,5.656l-17.074,16.66l17.113,16.698c1.581,1.542 1.611,4.075 0.069,5.656c-0.783,0.803 -1.823,1.207 -2.863,1.207z"></path>
                        </g>
                    </g>
                </svg>
            </button>
            <span class="w-6 cursor-default">@MonthDisplay</span>
            <span class="cursor-default">@YearDisplay</span>
            <button class="@ActualNextMonthButtonStyle" @onclick="NextMonth">
                <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="20px" height="20px" viewBox="0,0,256,256">
                    <g fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" style="mix-blend-mode: normal">
                        <g transform="scale(3.55556,3.55556)">
                            <path d="M25.977,59.542c-1.04,0 -2.079,-0.403 -2.863,-1.207c-1.542,-1.581 -1.512,-4.114 0.069,-5.656l17.113,-16.698l-17.074,-16.66c-1.581,-1.542 -1.611,-4.075 -0.069,-5.656c1.544,-1.582 4.076,-1.612 5.657,-0.069l20.008,19.522c0.771,0.752 1.206,1.785 1.206,2.863c0,1.078 -0.435,2.11 -1.206,2.863l-20.047,19.56c-0.779,0.76 -1.787,1.138 -2.794,1.138z"></path>
                        </g>
                    </g>
                </svg>
            </button>
        </div>
        <div class="calendar-grid">
            <span class="calendar-weekday">M</span>
            <span class="calendar-weekday">T</span>
            <span class="calendar-weekday">W</span>
            <span class="calendar-weekday">T</span>
            <span class="calendar-weekday">F</span>
            <span class="calendar-weekday">S</span>
            <span class="calendar-weekday">S</span>
            @for (int i = 0; i < DayOffset; i++)
            {
                <span />
            }
            @for (int i = 1; i <= DaysInMonth; i++)
            {
                int day = i;
                <button class="@GetDayStyle(day)" @onclick="() => SelectAsync(day)">@i</button>
            }
        </div>
    </div>
</div>

@code {
    private readonly Guid _id = Guid.NewGuid();

    private int _browsedYear = DateTimeOffset.UtcNow.Year;

    private int _browsedMonth = DateTimeOffset.UtcNow.Month;

    private bool _isExpanded = false;

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public DateTimeOffset? Value { get; set; }

    [Parameter]
    public EventCallback<DateTimeOffset> ValueChanged { get; set; }

    [Parameter]
    public DateTimeOffset From { get; set; } = DateTimeOffset.MinValue;

    [Parameter]
    public DateTimeOffset To { get; set; } = DateTimeOffset.MaxValue;

    [Parameter]
    public bool? IsFullWidth { get; set; }

    [Parameter]
    public bool IsEdited { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    private string SelectionDisplay => Value?.ToString("d MMM yyyy") ?? "Select a Date";

    private string MonthDisplay => new DateTime(_browsedYear, _browsedMonth, 1).ToString("MMM");

    private string YearDisplay => new DateTime(_browsedYear, _browsedMonth, 1).ToString("yyyy");

    private int DayOffset => ((int)new DateTime(_browsedYear, _browsedMonth, 1).DayOfWeek + 6) % 7;

    private int DaysInMonth => DateTime.DaysInMonth(_browsedYear, _browsedMonth);

    private bool IsPreviousMonthInRange
    {
        get
        {
            var previousYear = _browsedYear;
            var previousMonth = _browsedMonth - 1;

            if (previousMonth == 0)
            {
                --previousYear;
                previousMonth = 12;
            }

            var lastDayOfPreviousMonth = new DateTime(previousYear, previousMonth, DateTime.DaysInMonth(previousYear, previousMonth));
            return lastDayOfPreviousMonth >= From;
        }
    }

    private bool IsNextMonthInRage
    {
        get
        {
            var nextYear = _browsedYear;
            var nextMonth = _browsedMonth + 1;

            if (nextMonth == 13)
            {
                ++nextYear;
                nextMonth = 1;
            }

            return new DateTimeOffset(nextYear, nextMonth, 1, 0, 0, 0, TimeSpan.Zero) <= To;
        }
    }

    private bool ActualIsExpanded => _isExpanded && !IsDisabled && !IsLoading;

    private string ActualWidth => IsFullWidth == true ? "w-full" : IsFullWidth == null ? "w-full sm:w-auto" : "";

    private string ActualLabelStyle => IsDisabled || IsLoading ? "label-disabled" : "label-default";

    private string ActualEditIndicatorStyle
    {
        get
        {
            if (IsEdited)
            {
                return IsLoading || IsDisabled ? "edit-indicator-disabled" : "edit-indicator-default";
            }

            return "edit-indicator-inactive";
        }
    }

    private string ActualDropdownButtonStyle
    {
        get
        {
            if (IsLoading)
            {
                return "dropdown-loading";
            }
            else if (IsDisabled)
            {
                return "dropdown-disabled";
            }
            else if (ActualIsExpanded)
            {
                return "dropdown-expanded";
            }
            else
            {
                return "dropdown-collapsed";
            }
        }
    }

    private string ActualCalendarStyle
    {
        get
        {
            string style = ActualIsExpanded ? "dropdown-calendar-expanded" : "dropdown-calendar-collapsed";

            if (IsFullWidth == true)
            {
                style += " w-full";
            }
            else if (IsFullWidth == null)
            {
                style += " w-full sm:w-auto";
            }

            return style;
        }
    }

    private string ActualPreviousMonthButtonStyle => IsPreviousMonthInRange ? "month-btn-enabled" : "month-btn-disabled";

    private string ActualNextMonthButtonStyle => IsNextMonthInRage ? "month-btn-enabled" : "month-btn-disabled";

    protected override void OnInitialized()
    {
        if (Value != null)
        {
            _browsedYear = Value.Value.Year;
            _browsedMonth = Value.Value.Month;
        }
    }

    private string GetDayStyle(int day)
    {
        var value = new DateTimeOffset(_browsedYear, _browsedMonth, day, 0, 0, 0, TimeSpan.Zero);
        var outOfRange = value < From || value > To;

        if (IsSelected(day))
        {
            return outOfRange ? "day-selected-disabled" : "day-selected-enabled";
        }

        if (IsToday(day))
        {
            return outOfRange ? "day-today-disabled" : "day-today-enabled";
        }

        return outOfRange ? "day-other-disabled" : "day-other-enabled";
    }

    private bool IsSelected(int day)
    {
        return _browsedMonth == Value?.Month && _browsedYear == Value?.Year && day == Value?.Day;
    }

    private bool IsToday(int day)
    {
        return _browsedMonth == DateTimeOffset.UtcNow.Month && _browsedYear == DateTimeOffset.UtcNow.Year && day == DateTimeOffset.UtcNow.Day;
    }

    private void Toggle()
    {
        if (!IsDisabled && !IsLoading)
        {
            _isExpanded = !_isExpanded;

            if (_isExpanded)
            {
                _browsedYear = Value?.Year ?? DateTimeOffset.UtcNow.Year;
                _browsedMonth = Value?.Month ?? DateTimeOffset.UtcNow.Month;
            }
        }
    }

    private void PreviousMonth()
    {
        if (!IsPreviousMonthInRange)
        {
            return;
        }

        if (_browsedMonth == 1)
        {
            if (_browsedYear == 1)
            {
                return;
            }

            _browsedYear--;
            _browsedMonth = 12;
        }
        else
        {
            _browsedMonth--;
        }
    }

    private void NextMonth()
    {
        if (!IsNextMonthInRage)
        {
            return;
        }

        if (_browsedMonth == 12)
        {
            if (_browsedYear == 9999)
            {
                return;
            }

            _browsedYear++;
            _browsedMonth = 1;
        }
        else
        {
            _browsedMonth++;
        }
    }

    private async Task SelectAsync(int day)
    {
        var value = new DateTimeOffset(_browsedYear, _browsedMonth, day, 0, 0, 0, TimeSpan.Zero);
        if (value < From || value > To)
        {
            return;
        }

        _isExpanded = false;

        Value = value;
        await ValueChanged.InvokeAsync(Value.Value);
    }
}
