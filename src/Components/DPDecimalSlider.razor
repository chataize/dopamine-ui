<div class="space-y-3 @WidthClass">
    <div class="relative">
        @if (!string.IsNullOrWhiteSpace(Label))
        {
            <label class="dp-label-base">
                <span class="@LabelClass">@Label</span>
                @if (Value >= MaxValue && !string.IsNullOrWhiteSpace(MaxValueLabel))
                {
                    <span class="@LabelClass"> — </span>
                    <span class="@LabelClass">@MaxValueLabel</span>
                }
                else if (Value <= MinValue && !string.IsNullOrWhiteSpace(MinValueLabel))
                {
                    <span class="@LabelClass"> — </span>
                    <span class="@LabelClass">@MinValueLabel</span>
                }
                else
                {
                    @if (IsShowingValue)
                    {
                        <span class="@LabelClass"> — </span>
                        <span class="@LabelClass">@($"{(Value % 1 == 0 ? Value.ToString("F1") : Value.ToString())}")</span>
                        @if (IsShowingMaxValue)
                        {
                            <span class="@LabelClass text-xs"> / </span>
                            <span class="@LabelClass">@MaxValue</span>
                        }
                        @if (!string.IsNullOrWhiteSpace(Unit))
                        {
                            <span class="@LabelClass">@Unit</span>
                        }
                    }
                    @if (IsShowingPercentage)
                    {
                        <span class="@LabelClass"> — </span>
                        <span class="@LabelClass">@Math.Round(Percentage, 2)%</span>
                    }
                }
                <span class="@EditIndicatorClass">●</span>
            </label>
        }
        <div class="absolute bottom-0 flex h-2 mb-1.5 rounded-full overflow-hidden @WidthClass">
            <div class="@FillClass @WidthClass" style="width: @Math.Round(Math.Clamp(Percentage, 0.0, 100.0))%" />
        </div>
        <input id="@_id" type="range" class="@SliderClass @WidthClass" min="@MinValue" max="@MaxValue" step="@Step" disabled="@Context.IsDisabled" @bind="InternalValue" @bind:event="oninput" @bind:after="InvokeValueChangedAsync" />
    </div>
    @if (!string.IsNullOrWhiteSpace(Caption))
    {
        <div class="@CaptionClass">@Caption</div>
    }
</div>

@code {
    private readonly string _id = Random.Shared.Next().ToString();

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? Caption { get; set; }

    [Parameter]
    public string? Unit { get; set; }

    [Parameter]
    public double Value { get; set; }

    [Parameter]
    public EventCallback<double> ValueChanged { get; set; }

    [Parameter]
    public double Step { get; set; } = 1.0;

    [Parameter]
    public double MinValue { get; set; }

    [Parameter]
    public string? MinValueLabel { get; set; }

    [Parameter]
    public double MaxValue { get; set; } = 100.0;

    [Parameter]
    public string? MaxValueLabel { get; set; }

    [Parameter]
    public bool IsShowingValue { get; set; }

    [Parameter]
    public bool IsShowingMaxValue { get; set; }

    [Parameter]
    public bool IsShowingPercentage { get; set; }

    [Parameter]
    public bool? IsFullWidth { get; set; }

    [Parameter]
    public bool IsEdited { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [CascadingParameter]
    private UIContext ParentContext { get; set; } = new();

    private UIContext Context => ParentContext with { IsDisabled = ParentContext.IsDisabled || IsDisabled };

    private double Percentage => MaxValue == MinValue ? 100.0 : ((Value - MinValue) / (MaxValue - MinValue)) * 100.0;

    private double InternalValue
    {
        get => Value;
        set
        {
            if (!Context.IsDisabled && value != Value && value >= MinValue && value <= MaxValue)
            {
                Value = value;
            }
        }
    }

    private string LabelClass => Context.IsDisabled ? "dp-label-disabled" : "dp-label";

    private string EditIndicatorClass
    {
        get
        {
            if (IsEdited)
            {
                return Context.IsDisabled ? "dp-edit-indicator-disabled" : "dp-edit-indicator";
            }

            return "dp-edit-indicator-inactive";
        }
    }

    private string SliderClass => Context.IsDisabled ? "dp-slider-disabled" : "dp-slider";

    private string FillClass => Context.IsDisabled ? "dp-slider-fill-disabled" : "dp-slider-fill";

    private string CaptionClass
    {
        get
        {
            var captionClass = Context.IsDisabled ? "dp-caption-disabled" : "dp-caption";

            if (!string.IsNullOrWhiteSpace(Label))
            {
                captionClass += " px-3";
            }

            return captionClass;
        }
    }

    private string WidthClass
    {
        get
        {
            if (IsFullWidth == true)
            {
                return "w-full min-w-fit";
            }

            if (IsFullWidth == false)
            {
                return "w-64";
            }

            return "w-full sm:w-64 min-w-fit";
        }
    }

    private async Task InvokeValueChangedAsync()
    {
        if (!Context.IsDisabled && ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(Value);
        }
    }
}
