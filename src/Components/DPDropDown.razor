@typeparam T

<div class="space-y-3 @WidthClass">
    <div>
        @if (!String.IsNullOrWhiteSpace(Label))
        {
            <label for="@_id" class="dp-label-base">
                <span class="@LabelClass">@Label</span>
                <span class="@EditIndicatorClass">‚óè</span>
            </label>
        }
        <div class="relative flex">
            <button id="@_id" class="@ButtonClass @WidthClass" disabled="@Context.IsDisabled" @onclick="ToogleIsOpen">
                <span>@ValueLabel</span>
                @if (IsLoading)
                {
                    <img src="/_content/ChatAIze.DopamineUI/img/loading.gif" height="20" width="20" class="dark:hidden" />
                    <img src="/_content/ChatAIze.DopamineUI/img/loading-dark.gif" height="20" width="20" class="hidden dark:inline" />
                }
                else
                {
                    <svg class="transition-all duration-300 ease-in-out @(ActualIsOpen ? "-rotate-180" : "rotate-0")" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="20px" height="20px" viewBox="0,0,256,256">
                        <g fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" style="mix-blend-mode: normal">
                            <g transform="scale(8.53333,8.53333)">
                                <path d="M24.99023,8.98633c-0.26377,0.00624 -0.51439,0.11645 -0.69727,0.30664l-9.29297,9.29297l-9.29297,-9.29297c-0.18827,-0.19353 -0.4468,-0.30272 -0.7168,-0.30273c-0.40692,0.00011 -0.77321,0.24676 -0.92633,0.62377c-0.15312,0.37701 -0.06255,0.80921 0.22907,1.09303l10,10c0.39053,0.39037 1.02353,0.39037 1.41406,0l10,-10c0.29724,-0.28583 0.38857,-0.7248 0.23,-1.10546c-0.15857,-0.38066 -0.53454,-0.62497 -0.94679,-0.61524z"></path>
                            </g>
                        </g>
                    </svg>
                }
            </button>
            <div class="@ListClass @WidthClass @ScrollClass">
                <CascadingValue Value="ChildContext">
                    <CascadingValue Value="this">@ChildContent</CascadingValue>
                </CascadingValue>
            </div>
        </div>
    </div>
    @if (!string.IsNullOrWhiteSpace(Caption))
    {
        <div class="@CaptionClass">@Caption</div>
    }
</div>

@code {
    private readonly string _id = Random.Shared.Next().ToString();

    private bool _isOpen { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? Caption { get; set; }

    [Parameter]
    public T? Value { get; set; }

    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool? IsFullWidth { get; set; }

    [Parameter]
    public bool IsScrollable { get; set; }

    [Parameter]
    public bool IsEdited { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public object? Tag { get; set; }

    internal List<DPDropDownItem<T>> Items { get; set; } = [];

    internal bool ActualIsOpen => _isOpen && !Context.IsDisabled;

    [CascadingParameter]
    private UIContext ParentContext { get; set; } = new();

    private UIContext Context => ParentContext with { IsDisabled = ParentContext.IsDisabled || IsLoading || IsDisabled };

    private UIContext ChildContext => Context with { IsDisabled = ParentContext.IsDisabled || !_isOpen };

    private RenderFragment? ValueLabel => Items.FirstOrDefault(x => x.Value?.Equals(Value) == true)?.ChildContent;

    private string LabelClass => Context.IsDisabled ? "dp-label-disabled" : "dp-label";

    private string EditIndicatorClass
    {
        get
        {
            if (IsEdited)
            {
                return Context.IsDisabled ? "dp-edit-indicator-disabled" : "dp-edit-indicator";
            }

            return "dp-edit-indicator-inactive";
        }
    }

    private string ButtonClass
    {
        get
        {
            if (IsLoading)
            {
                return "dp-dropdown-loading";
            }

            if (Context.IsDisabled)
            {
                return "dp-dropdown-disabled";
            }

            if (ActualIsOpen)
            {
                return "dp-dropdown-open";
            }

            return "dp-dropdown";
        }
    }

    private string ListClass => ActualIsOpen ? "dp-menu translate-y-12" : "dp-menu-hidden -translate-y-12";

    private string ScrollClass => IsScrollable ? "overflow-y-scroll overflow-x-hidden max-h-80" : "";

    private string CaptionClass => Context.IsDisabled ? "dp-caption-disabled px-3" : "dp-caption px-3";

    private string WidthClass
    {
        get
        {
            if (IsFullWidth == true)
            {
                return "w-full min-w-fit";
            }

            if (IsFullWidth == false)
            {
                return "w-fit";
            }

            return "w-full sm:w-fit min-w-fit";
        }
    }

    internal async Task UpdateValueAsync(T? value)
    {
        if (!Context.IsDisabled)
        {
            _isOpen = false;
            Value = value;

            if (ValueChanged.HasDelegate)
            {
                await ValueChanged.InvokeAsync(value);
            }
        }
    }

    internal void TriggerStateHasChanged()
    {
        StateHasChanged();
    }

    private void ToogleIsOpen()
    {
        if (!Context.IsDisabled)
        {
            _isOpen = !_isOpen;
        }
    }
}
