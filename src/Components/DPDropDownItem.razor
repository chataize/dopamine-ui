@typeparam T
@implements ITaggable

<button class="@ItemClass" disabled="@Context.IsDisabled" ontouchstart="" @onclick="OnClickAsync">
    <CascadingValue Value="Context">@ChildContent</CascadingValue>
</button>

@code {
    [Parameter]
    public T? Value { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public object? Tag { get; set; }

    [CascadingParameter]
    private DPDropDown<T>? DropDown { get; set; }

    [CascadingParameter]
    private UIContext ParentContext { get; set; } = new();

    private UIContext Context => ParentContext with { IsDisabled = ParentContext.IsDisabled || DropDown?.ActualIsOpen == false || IsDisabled };

    private string ItemClass
    {
        get
        {
            if (Value != null && DropDown != null && Value.Equals(DropDown.Value))
            {
                if (Context.IsDisabled)
                {
                    return "dp-menu-item-selected-disabled";
                }

                return "dp-menu-item-selected";
            }

            if (Context.IsDisabled)
            {
                return "dp-menu-item-disabled";
            }

            return "dp-menu-item";
        }
    }

    protected override void OnInitialized()
    {
        if (DropDown != null)
        {
            DropDown.Items.Add(this);

            if (Value != null && Value.Equals(DropDown.Value))
            {
                DropDown.TriggerStateHasChanged();
            }
        }
    }

    private async Task OnClickAsync()
    {
        if (DropDown != null && !Context.IsDisabled)
        {
            await DropDown.UpdateValueAsync(Value);
        }
    }
}
