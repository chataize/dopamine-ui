<div class="relative">
    <div class="@ListClass @WidthClass">
        <CascadingValue Value="@Context">@ChildContent</CascadingValue>
    </div>
</div>

@code {
    [CascadingParameter]
    public UIContext ParentContext { get; set; } = new();

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool? IsFullWidth { get; set; }

    [Parameter]
    public bool IsExpanded { get; set; }

    [Parameter]
    public EventCallback<bool> IsExpandedChanged { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public object? Tag { get; set; }

    private UIContext Context => ParentContext with { Menu = this, IsDisabled = ParentContext.IsDisabled || IsDisabled };

    private bool ActualIsExpended => IsExpanded && !Context.IsDisabled;

    private string ListClass => ActualIsExpended ? "dp-menu" : "dp-menu-collapsed";

    private string WidthClass
    {
        get
        {
            if (IsFullWidth == true)
            {
                return "w-full min-w-fit";
            }

            if (IsFullWidth == false)
            {
                return "w-fit";
            }

            return "w-full sm:w-fit min-w-fit";
        }
    }

    internal async Task CollapseAsync()
    {
        IsExpanded = false;

        if (IsExpandedChanged.HasDelegate)
        {
            await IsExpandedChanged.InvokeAsync(IsExpanded);
        }
    }
}
