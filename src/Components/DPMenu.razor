<div class="relative">
    <div class="@ListClass @WidthClass">
        <CascadingValue Value="ChildContext">@ChildContent</CascadingValue>
    </div>
</div>

@code {
    [CascadingParameter]
    public UIContext ParentContext { get; set; } = new();

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool? IsFullWidth { get; set; }

    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public object? Tag { get; set; }

    private UIContext Context => ParentContext with { Menu = this, IsDisabled = ParentContext.IsDisabled || IsDisabled };

    private UIContext ChildContext => Context with { IsDisabled = Context.IsDisabled || !IsOpen };

    private bool ActualIsOpen => IsOpen && !Context.IsDisabled;

    private string ListClass => ActualIsOpen ? "dp-menu" : "dp-menu-hidden";

    private string WidthClass
    {
        get
        {
            if (IsFullWidth == true)
            {
                return "w-full min-w-fit";
            }

            if (IsFullWidth == false)
            {
                return "w-fit";
            }

            return "w-full sm:w-fit min-w-fit";
        }
    }

    internal async Task CloseAsync()
    {
        IsOpen = false;

        if (IsOpenChanged.HasDelegate)
        {
            await IsOpenChanged.InvokeAsync(IsOpen);
        }
    }
}
