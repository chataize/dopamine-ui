@inject NavigationManager NavigationManager

<button class="@LinkClass" @onclick="NavigateToPath">
    <CascadingValue Value="Context">
        @ChildContent
    </CascadingValue>
</button>

@code {
    [CascadingParameter]
    public UIContext ParentContext { get; set; } = new();

    [Parameter]
    public string? Path { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public object? Tag { get; set; }

    private UIContext Context => ParentContext with { IsDisabled = ParentContext.IsDisabled || IsDisabled };

    private bool IsSelected
    {
        get
        {
            if (Path == "/")
            {
                return ActivePath == "/";
            }

            return ActivePath.StartsWith(Path ?? string.Empty, StringComparison.OrdinalIgnoreCase);
        }
    }

    private string ActivePath => "/" + NavigationManager.ToBaseRelativePath(NavigationManager.Uri);

    private string LinkClass
    {
        get
        {
            if (IsSelected)
            {
                if (Context.IsDisabled)
                {
                    return "dp-navigation-menu-link-selected-disabled";
                }

                return "dp-navigation-menu-link-selected";
            }

            if (Context.IsDisabled)
            {
                return "dp-navigation-menu-link-disabled";
            }

            return "dp-navigation-menu-link";
        }
    }

    private void NavigateToPath()
    {
        if (!Context.IsDisabled && !string.IsNullOrWhiteSpace(Path))
        {
            Context.NavigationView?.Close();
            NavigationManager.NavigateTo(Path);
        }
    }
}
