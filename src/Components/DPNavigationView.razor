@inject NavigationManager NavigationManager

<div class="dp-navigation-view">
    <nav class="dp-navigation-menu">
        <div>
            <div class="dp-navigation-menu-logo">
                <CascadingValue Value="Context">@Logo</CascadingValue>
            </div>
            <div class="dp-navigation-menu-links">
                <CascadingValue Value="Context">@Links</CascadingValue>
            </div>
        </div>
        <div class="dp-navigation-menu-links">
            <CascadingValue Value="Context">@Footer</CascadingValue>
        </div>
    </nav>
    <div class="@MobileMenuClass">
        <div class="@MobileMenuBarClass">
            <span class="@MobileMenuLogoClass">
                <CascadingValue Value="Context">@Logo</CascadingValue>
            </span>
            <div class="@MobileMenuTitleClass">
                @if (!string.IsNullOrWhiteSpace(BackUrl))
                {
                    <button class="@ButtonClass" @onclick="TryGoBack">
                        <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0,0,256,256">
                            <g fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" style="mix-blend-mode: normal">
                                <g transform="scale(4,4)">
                                    <path d="M42.852,55.605c-0.504,0 -1.008,-0.189 -1.396,-0.568l-22.165,-21.626c-0.386,-0.376 -0.604,-0.893 -0.604,-1.432c0,-0.539 0.218,-1.055 0.604,-1.432l22.121,-21.584c0.789,-0.77 2.057,-0.756 2.828,0.035c0.771,0.791 0.756,2.057 -0.035,2.829l-20.653,20.152l20.696,20.194c0.791,0.771 0.807,2.038 0.035,2.829c-0.391,0.401 -0.912,0.603 -1.431,0.603z"></path>
                                </g>
                            </g>
                        </svg>
                    </button>
                }
                else
                {
                    <div />
                }
                <div>
                    <CascadingValue Value="Context">@Title</CascadingValue>
                </div>
            </div>
            <button class="@ButtonClass" @onclick="ToggleIsOpen">
                <svg class="@OpenIconClass" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0,0,256,256">
                    <g fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" style="mix-blend-mode: normal">
                        <g transform="scale(4,4)">
                            <path d="M51,46c1.104,0 2,0.895 2,2c0,1.105 -0.896,2 -2,2c-0.601,0 -37.399,0 -38,0c-1.104,0 -2,-0.895 -2,-2c0,-1.105 0.896,-2 2,-2c0.601,0 37.399,0 38,0zM51,30c1.104,0 2,0.895 2,2c0,1.105 -0.896,2 -2,2c-0.601,0 -37.399,0 -38,0c-1.104,0 -2,-0.895 -2,-2c0,-1.105 0.896,-2 2,-2c0.601,0 37.399,0 38,0zM51,14c1.104,0 2,0.895 2,2c0,1.105 -0.896,2 -2,2c-0.601,0 -37.399,0 -38,0c-1.104,0 -2,-0.895 -2,-2c0,-1.105 0.896,-2 2,-2c0.601,0 37.399,0 38,0z"></path>
                        </g>
                    </g>
                </svg>
                <svg class="@CloseIconClass" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24px" height="24px" viewBox="0,0,256,256">
                    <g fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" style="mix-blend-mode: normal">
                        <g transform="scale(4,4)">
                            <path d="M16,14c-0.512,0 -1.02306,0.19494 -1.41406,0.58594c-0.781,0.781 -0.781,2.04712 0,2.82812l14.58594,14.58594l-14.58594,14.58594c-0.781,0.781 -0.781,2.04713 0,2.82812c0.391,0.391 0.90206,0.58594 1.41406,0.58594c0.512,0 1.02306,-0.19494 1.41406,-0.58594l14.58594,-14.58594l14.58594,14.58594c0.781,0.781 2.04713,0.781 2.82812,0c0.781,-0.781 0.781,-2.04713 0,-2.82812l-14.58594,-14.58594l14.58594,-14.58594c0.781,-0.781 0.781,-2.04712 0,-2.82812c-0.781,-0.781 -2.04713,-0.781 -2.82812,0l-14.58594,14.58594l-14.58594,-14.58594c-0.391,-0.391 -0.90206,-0.58594 -1.41406,-0.58594z"></path>
                        </g>
                    </g>
                </svg>
            </button>
        </div>
        <nav class="@MobileMenuLinksClass">
            <CascadingValue Value="Context">@Links</CascadingValue>
            <CascadingValue Value="Context">@Footer</CascadingValue>
        </nav>
    </div>
    <div class="relative w-full h-screen overflow-auto">
        <CascadingValue Value="Context">@Content</CascadingValue>
    </div>
</div>

@code {
    private bool _isOpen;

    [Parameter]
    public RenderFragment? Logo { get; set; }

    [Parameter]
    public RenderFragment? Links { get; set; }

    [Parameter]
    public RenderFragment? Footer { get; set; }

    [Parameter]
    public RenderFragment? Content { get; set; }

    [Parameter]
    public RenderFragment? Title { get; set; }

    [Parameter]
    public string? BackUrl { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public object? Tag { get; set; }

    [CascadingParameter]
    private UIContext ParentContext { get; set; } = new();

    private UIContext Context => ParentContext with { NavigationView = this, IsDisabled = ParentContext.IsDisabled || IsDisabled };

    private string MobileMenuClass
    {
        get
        {
            if (Context.IsDisabled)
            {
                return "dp-mobile-navigation-menu";
            }

            return _isOpen ? "dp-mobile-navigation-menu-open" : "dp-mobile-navigation-menu";
        }
    }

    private string MobileMenuBarClass
    {
        get
        {
            if (Context.IsDisabled)
            {
                return "dp-mobile-navigation-menu-bar-hidden";
            }

            return _isOpen ? "dp-mobile-navigation-menu-bar" : "dp-mobile-navigation-menu-bar-hidden";
        }
    }

    private string MobileMenuTitleClass
    {
        get
        {
            if (Context.IsDisabled)
            {
                return "dp-mobile-navigation-menu-title-disabled";
            }

            return _isOpen ? "dp-mobile-navigation-menu-title-hidden" : "dp-mobile-navigation-menu-title";
        }
    }

    private string MobileMenuLogoClass
    {
        get
        {
            if (IsDisabled)
            {
                return "dp-mobile-navigation-menu-logo-hidden";
            }

            return _isOpen ? "dp-mobile-navigation-menu-logo" : "dp-mobile-navigation-menu-logo-hidden";
        }
    }

    private string ButtonClass => Context.IsDisabled ? "dp-mobile-navigation-menu-button-disabled" : "dp-mobile-navigation-menu-button";

    private string OpenIconClass
    {
        get
        {
            if (Context.IsDisabled)
            {
                return "dp-mobile-navigation-menu-button-open-icon";
            }

            return _isOpen ? "dp-mobile-navigation-menu-button-open-icon-hidden" : "dp-mobile-navigation-menu-button-open-icon";
        }
    }

    private string CloseIconClass
    {
        get
        {
            if (Context.IsDisabled)
            {
                return "dp-mobile-navigation-menu-button-close-icon-hidden";
            }

            return _isOpen ? "dp-mobile-navigation-menu-button-close-icon" : "dp-mobile-navigation-menu-button-close-icon-hidden";
        }
    }

    private string MobileMenuLinksClass => _isOpen && !Context.IsDisabled ? "dp-mobile-navigation-menu-links" : "dp-mobile-navigation-menu-links-hidden";

    internal void SetTitle(RenderFragment? title)
    {
        Title = title;
        StateHasChanged();
    }

    internal void SetBackUrl(string? backUrl)
    {
        BackUrl = backUrl;
        StateHasChanged();
    }

    internal void Close()
    {
        _isOpen = false;
    }

    private void ToggleIsOpen()
    {
        if (!Context.IsDisabled)
        {
            _isOpen = !_isOpen;
        }
    }

    private void TryGoBack()
    {
        if (!Context.IsDisabled && !string.IsNullOrWhiteSpace(BackUrl))
        {
            NavigationManager.NavigateTo(BackUrl);
        }
    }
}
