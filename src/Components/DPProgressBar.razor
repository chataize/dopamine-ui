<div class="space-y-3">
    <div>
        @if (!string.IsNullOrWhiteSpace(Label))
        {
            <label class="dp-label-base">
                <span class="@LabelClass">@Label</span>
                @if (Value >= MaxValue && !string.IsNullOrWhiteSpace(MaxValueLabel))
                {
                    <span class="@LabelClass"> — </span>
                    <span class="@LabelClass">@MaxValueLabel</span>
                }
                else if (Value <= 0.0 && !string.IsNullOrWhiteSpace(ZeroLabel))
                {
                    <span class="@LabelClass"> — </span>
                    <span class="@LabelClass">@ZeroLabel</span>
                }
                else
                {
                    @if (IsShowingValue)
                    {
                        <span class="@LabelClass"> — </span>
                        <span class="@LabelClass">@Value</span>
                        @if (IsShowingMaxValue)
                        {
                            <span class="@LabelClass text-xs"> / </span>
                            <span class="@LabelClass">@MaxValue</span>
                        }
                        @if (!string.IsNullOrWhiteSpace(Unit))
                        {
                            <span class="@LabelClass">@Unit</span>
                        }
                    }
                    @if (IsShowingPercentage)
                    {
                        <span class="@LabelClass"> — </span>
                        <span class="@LabelClass">@Math.Round(ActualValue, 2)%</span>
                    }
                }
            </label>
        }
        <div class="dp-progressbar @WidthClass">
            <div class="@FillClass" style="width: @Math.Round(Math.Clamp(ActualValue, 0.0, 100.0))%"></div>
        </div>
    </div>
    @if (!string.IsNullOrWhiteSpace(Caption))
    {
        <div class="@CaptionClass">@Caption</div>
    }
</div>

@code {
    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? Caption { get; set; }

    [Parameter]
    public string? Unit { get; set; }

    [Parameter]
    public double Value { get; set; } = 0.5;

    [Parameter]
    public string? ZeroLabel { get; set; }

    [Parameter]
    public int MaxValue { get; set; } = 100;

    [Parameter]
    public string? MaxValueLabel { get; set; }

    [Parameter]
    public bool IsShowingValue { get; set; }

    [Parameter]
    public bool IsShowingMaxValue { get; set; }

    [Parameter]
    public bool IsShowingPercentage { get; set; }

    [Parameter]
    public bool? IsFullWidth { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public object? Tag { get; set; }

    [CascadingParameter]
    private UIContext ParentContext { get; set; } = new();

    private UIContext Context => ParentContext with { IsDisabled = ParentContext.IsDisabled || IsDisabled };

    private double ActualValue => MaxValue == 0.0 ? 0.0 : (Value / MaxValue) * 100.0;

    private string LabelClass => Context.IsDisabled ? "dp-label-disabled" : "dp-label";

    private string FillClass => Context.IsDisabled ? "dp-progressbar-fill-disabled" : "dp-progressbar-fill";

    private string CaptionClass
    {
        get
        {
            var captionClass = Context.IsDisabled ? "dp-caption-disabled" : "dp-caption";

            if (!string.IsNullOrWhiteSpace(Label))
            {
                captionClass += " px-3";

            }

            return captionClass;
        }
    }

    private string WidthClass
    {
        get
        {
            if (IsFullWidth == true)
            {
                return "w-full min-w-fit";
            }

            if (IsFullWidth == false)
            {
                return "w-64";
            }

            return "w-full sm:w-64 min-w-fit";
        }
    }
}
