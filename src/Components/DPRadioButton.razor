@typeparam T

<label for="@_id" class="group @LabelClass @BorderClass @WidthClass">
    <input id="@_id" type="checkbox" value="@IsSelected" disabled="@ActualIsDisabled" hidden @onchange="OnChangeAsync" />
    <div class="group @CircleClass">
        <div class="@DotClass" />
    </div>
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <span>@Label</span>
    }
</label>

@code {
    private readonly string _id = Random.Shared.Next().ToString();

    [CascadingParameter]
    public DPRadioGroup<T>? RadioGroup { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public T? Value { get; set; }

    [Parameter]
    public bool? IsBorderless { get; set; }

    [Parameter]
    public bool? IsFullWidth { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public object? Tag { get; set; }

    private bool IsSelected => RadioGroup != null && EqualityComparer<T>.Default.Equals(Value, RadioGroup.Value);

    private bool ActualIsDisabled => IsDisabled || RadioGroup?.IsDisabled == true;

    private string LabelClass => ActualIsDisabled ? "dp-radio-label-disabled" : "dp-radio-label-enabled";

    private string BorderClass
    {
        get
        {
            if (IsBorderless == false)
            {
                return IsDisabled ? "dp-frame-disabled" : "dp-frame-enabled";
            }

            if (IsBorderless == true || string.IsNullOrWhiteSpace(Label))
            {
                return string.Empty;
            }

            return IsDisabled ? "-sm:dp-frame-disabled" : "-sm:dp-frame-enabled";
        }
    }

    private string CircleClass
    {
        get
        {
            if (ActualIsDisabled)
            {
                return IsSelected ? "dp-radio-container-disabled-on" : "dp-radio-container-disabled-off";
            }

            return IsSelected ? "dp-radio-container-on" : "dp-radio-container-off";
        }
    }

    private string DotClass
    {
        get
        {
            if (ActualIsDisabled)
            {
                return IsSelected ? "dp-radio-dot-disabled-on" : "dp-radio-dot-disabled-off";
            }

            return IsSelected ? "dp-radio-dot-on" : "dp-radio-dot-off";
        }
    }

    private string WidthClass
    {
        get
        {
            if (IsFullWidth == true)
            {
                return "w-full";
            }

            if (IsFullWidth == false || string.IsNullOrWhiteSpace(Label))
            {
                return "w-fit";
            }

            return "w-full sm:w-fit";
        }
    }

    private async Task OnChangeAsync()
    {
        if (RadioGroup != null && !ActualIsDisabled)
        {
            await RadioGroup.UpdateValueAsync(Value);
        }
    }
}
