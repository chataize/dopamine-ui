@typeparam T
@implements ITaggable

<div class="space-y-3 @WidthClass">
    <label for="@_id" class="group/radio @LabelClass @BorderClass @WidthClass">
        <input id="@_id" type="checkbox" value="@IsSelected" disabled="@Context.IsDisabled" hidden @onchange="OnChangeAsync" />
        <div class="@CircleClass">
            <div class="@DotClass" />
        </div>
        @if (!string.IsNullOrWhiteSpace(Label))
        {
            <span>@Label</span>
        }
    </label>
    @if (!string.IsNullOrWhiteSpace(Caption))
    {
        <div class="@CaptionClass">@Caption</div>
    }
</div>

@code {
    private readonly string _id = Random.Shared.Next().ToString();


    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? Caption { get; set; }

    [Parameter]
    public T? Value { get; set; }

    [Parameter]
    public bool? IsBorderless { get; set; }

    [Parameter]
    public bool? IsFullWidth { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public object? Tag { get; set; }

    [CascadingParameter]
    private DPRadioGroup<T>? RadioGroup { get; set; }

    [CascadingParameter]
    private UIContext ParentContext { get; set; } = new();

    private UIContext Context => ParentContext with { IsDisabled = ParentContext.IsDisabled || RadioGroup?.IsDisabled == true || IsDisabled };

    private bool IsSelected => RadioGroup != null && EqualityComparer<T>.Default.Equals(Value, RadioGroup.Value);

    private string LabelClass => Context.IsDisabled ? "dp-radio-disabled" : "dp-radio";

    private string BorderClass
    {
        get
        {
            var isBorderless = IsBorderless ?? RadioGroup?.IsBorderless;

            if (isBorderless == false)
            {
                return Context.IsDisabled ? "dp-border-disabled" : "dp-border";
            }

            if (isBorderless == true || string.IsNullOrWhiteSpace(Label))
            {
                return string.Empty;
            }

            return Context.IsDisabled ? "not-sm:dp-border-disabled" : "not-sm:dp-border";
        }
    }

    private string CircleClass
    {
        get
        {
            if (Context.IsDisabled)
            {
                return IsSelected ? "dp-radio-circle-on-disabled" : "dp-radio-circle-off-disabled";
            }

            return IsSelected ? "dp-radio-circle-on" : "dp-radio-circle-off";
        }
    }

    private string DotClass
    {
        get
        {
            if (Context.IsDisabled)
            {
                return IsSelected ? "dp-radio-dot-on-disabled" : "dp-radio-dot-off-disabled";
            }

            return IsSelected ? "dp-radio-dot-on" : "dp-radio-dot-off";
        }
    }

    private string CaptionClass
    {
        get
        {
            var captionClass = Context.IsDisabled ? "dp-caption-disabled" : "dp-caption";
            var isBorderless = IsBorderless ?? RadioGroup?.IsBorderless;

            if (isBorderless == false)
            {
                return captionClass + " px-3";
            }

            if (isBorderless == true || string.IsNullOrWhiteSpace(Label))
            {
                return captionClass;
            }

            return captionClass + " not-sm:px-3";
        }
    }

    private string WidthClass
    {
        get
        {
            var isFullWidth = IsFullWidth ?? RadioGroup?.IsFullWidth;
            if (isFullWidth == true)
            {
                return "w-full min-w-fit";
            }

            if (isFullWidth == false || string.IsNullOrWhiteSpace(Label))
            {
                return "w-fit";
            }

            return "w-full sm:w-fit min-w-fit";
        }
    }

    private async Task OnChangeAsync()
    {
        if (!Context.IsDisabled && RadioGroup != null)
        {
            await RadioGroup.UpdateValueAsync(Value);
        }
    }
}
