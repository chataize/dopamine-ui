@typeparam T

<div class="@(IsFullWidth == true ? "w-full" : IsFullWidth == null ? "w-full sm:w-fit" : "")">
    @if (string.IsNullOrWhiteSpace(Label))
    {
        <label for="@_id" class="@ActualLabelStyle">
            <input id="@_id" type="checkbox" disabled="@ActualIsDisabled" hidden value="@IsSelected" @onchange="OnChangeAsync" />
            <div class="@ActualContainerStyle">
                <div class="@ActualDotStyle" />
            </div>
        </label>
    }
    else
    {
        <label for="@_id" class="@ActualLabelStyle">
            <input id="@_id" type="checkbox" disabled="@ActualIsDisabled" hidden value="@IsSelected" @onchange="OnChangeAsync" />
            <div class="@ActualContainerStyle">
                <div class="@ActualDotStyle" />
            </div>
            <span>@Label</span>
        </label>
    }
</div>

@code {
    private readonly string _id = Random.Shared.Next().ToString();

    [CascadingParameter]
    public DPRadioGroup<T>? RadioGroup { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public T? Value { get; set; }

    [Parameter]
    public bool? IsFrameVisible { get; set; }

    [Parameter]
    public bool? IsFullWidth { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    private bool IsSelected => RadioGroup != null && EqualityComparer<T>.Default.Equals(Value, RadioGroup.Value);

    private bool? ActualIsFrameVisible => IsFrameVisible ?? string.IsNullOrWhiteSpace(Label) ? false : null;

    private bool ActualIsDisabled => IsDisabled || RadioGroup?.IsDisabled == true;

    private string ActualLabelStyle
    {
        get
        {
            string style = ActualIsDisabled ? "radio-label-disabled group" : "radio-label-enabled group";

            if (!string.IsNullOrWhiteSpace(Label))
            {

                if (IsFullWidth == true)
                {
                    style += " w-full";
                }
                else if (IsFullWidth == null)
                {
                    style += " w-full sm:w-auto";
                }
            }

            if (IsFrameVisible == true)
            {
                style += ActualIsDisabled ? " frame-disabled" : " frame-enabled";
            }
            else if (IsFrameVisible == null && !string.IsNullOrWhiteSpace(Label))
            {
                style += ActualIsDisabled ? " -sm:frame-disabled" : " -sm:frame-enabled";
            }

            return style;
        }
    }

    private string ActualContainerStyle
    {
        get
        {
            if (ActualIsDisabled)
            {
                return IsSelected ? "radio-container-disabled-on group" : "radio-container-disabled-off group";
            }

            return IsSelected ? "radio-container-on group" : "radio-container-off group";
        }
    }

    private string ActualDotStyle
    {
        get
        {
            if (ActualIsDisabled)
            {
                return IsSelected ? "radio-dot-disabled-on" : "radio-dot-disabled-off";
            }

            return IsSelected ? "radio-dot-on" : "radio-dot-off";
        }
    }

    private async Task OnChangeAsync()
    {
        if (RadioGroup != null && !ActualIsDisabled)
        {
            await RadioGroup.UpdateValueAsync(Value);
        }
    }
}
