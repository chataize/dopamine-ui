<div class="select-none @WidthClass">
    @if (!String.IsNullOrWhiteSpace(Label))
    {
        <label for="@_id" class="dp-label-base">
            <span class="@ActualLabelStyle">@Label</span>
            <span class="@EditIndicatorClass">‚óè</span>
        </label>
    }
    <div id="@_id" class="@BorderClass @WidthClass">
        <div class="relative flex items-center py-2 pl-3 w-fit">
            <input class="dp-stepper-number @(Context.IsDisabled ? "select-none" : "") @(_isValueAlternated ? "dp-number-animation" : "")" type="text" size="@ActualInputSize" maxlength="@MaxValueLength" disabled="@Context.IsDisabled" @bind="ActualValue" @bind:after="InvokeValueChangedAsync" />
            <input class="dp-stepper-number absolute @(Context.IsDisabled ? "select-none" : "") @(!_isValueAlternated ? "dp-number-animation" : "")" type="text" size="@ActualInputSize" maxlength="@MaxValueLength" disabled="@Context.IsDisabled" @bind="ActualValue" @bind:after="InvokeValueChangedAsync" />
        </div>
        <div class="relative flex items-center">
            <div class="pl-2 pr-1 group dp-stepper-button-hitbox" @onclick="DecrementAsync">
                <button class="@DecrementButtonClass" disabled="@Context.IsDisabled">
                    <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="20px" height="20px" viewBox="0,0,256,256">
                        <g fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" style="mix-blend-mode: normal">
                            <g transform="scale(3.55556,3.55556)">
                                <path d="M55,40h-38c-2.209,0 -4,-1.791 -4,-4c0,-2.209 1.791,-4 4,-4h38c2.209,0 4,1.791 4,4c0,2.209 -1.791,4 -4,4z"></path>
                            </g>
                        </g>
                    </svg>
                </button>
            </div>
            <div class="pl-1 pr-2 group dp-stepper-button-hitbox" @onclick="IncrementAsync">
                <button class="@IncrementButtonClass" disabled="@Context.IsDisabled">
                    <svg version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="20px" height="20px" viewBox="0,0,256,256">
                        <g fill-rule="nonzero" stroke="none" stroke-width="1" stroke-linecap="butt" stroke-linejoin="miter" stroke-miterlimit="10" stroke-dasharray="" stroke-dashoffset="0" font-family="none" font-weight="none" font-size="none" text-anchor="none" style="mix-blend-mode: normal">
                            <g transform="scale(3.55556,3.55556)">
                                <path d="M36,13c-2.209,0 -4,1.791 -4,4v15h-15c-2.209,0 -4,1.791 -4,4c0,2.209 1.791,4 4,4h15v15c0,2.209 1.791,4 4,4c2.209,0 4,-1.791 4,-4v-15h15c2.209,0 4,-1.791 4,-4c0,-2.209 -1.791,-4 -4,-4h-15v-15c0,-2.209 -1.791,-4 -4,-4z"></path>
                            </g>
                        </g>
                    </svg>
                </button>
            </div>
            @if (IsLoading)
            {
                <div class="absolute right-0 flex items-center pr-3 w-fit">
                    <img src="/_content/ChatAIze.DopamineUI/img/loading.gif" height="20" width="20" class="dark:hidden" />
                    <img src="/_content/ChatAIze.DopamineUI/img/loading-dark.gif" height="20" width="20" class="hidden dark:inline" />
                </div>
            }
        </div>
    </div>
</div>


@code {
    private readonly string _id = Random.Shared.Next().ToString();

    private bool _isValueAlternated;

    [CascadingParameter]
    public UIContext ParentContext { get; set; } = new();

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public int Value { get; set; }

    [Parameter]
    public EventCallback<int> ValueChanged { get; set; }

    [Parameter]
    public int MinValue { get; set; }

    [Parameter]
    public int MaxValue { get; set; } = 1000000000;

    [Parameter]
    public int Step { get; set; } = 1;

    [Parameter]
    public bool? IsFullWidth { get; set; }

    [Parameter]
    public bool IsEdited { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public object? Tag { get; set; }

    private UIContext Context => ParentContext with { IsDisabled = ParentContext.IsDisabled || IsLoading || IsDisabled };

    private string ActualValue
    {
        get => Value.ToString().Trim();
        set
        {
            if (!Context.IsDisabled && int.TryParse(value, out var result))
            {
                Value = Math.Clamp(result, MinValue, MaxValue);

                if (ValueChanged.HasDelegate)
                {
                    ValueChanged.InvokeAsync(Value);
                }
            }
        }
    }

    private int ActualInputSize => Math.Max(6, MaxValueLength);

    private int MaxValueLength => MaxValue.ToString().Length;

    private bool CanIncrement => !Context.IsDisabled && Value + Step <= MaxValue;

    private bool CanDecrement => !Context.IsDisabled && Value - Step >= MinValue;

    private string ActualLabelStyle => Context.IsDisabled ? "dp-label-disabled" : "dp-label";

    private string EditIndicatorClass
    {
        get
        {
            if (IsEdited)
            {
                return Context.IsDisabled ? "dp-edit-indicator-disabled" : "dp-edit-indicator";
            }

            return "dp-edit-indicator-inactive";
        }
    }

    private string BorderClass
    {
        get
        {
            if (IsLoading)
            {
                return "dp-stepper-loading";
            }

            if (IsDisabled)
            {
                return "dp-stepper-disabled";
            }

            return "dp-stepper";
        }
    }

    private string IncrementButtonClass => IsLoading ? "dp-stepper-button-loading" : CanIncrement ? "dp-stepper-button" : "dp-stepper-button-disabled";

    private string DecrementButtonClass => IsLoading ? "dp-stepper-button-loading" : CanDecrement ? "dp-stepper-button" : "dp-stepper-button-disabled";

    private string WidthClass
    {
        get
        {
            if (IsFullWidth == true)
            {
                return "w-full min-w-fit";
            }

            if (IsFullWidth == false)
            {
                return "w-fit";
            }

            return "w-full sm:w-fit min-w-fit";
        }
    }

    private async Task IncrementAsync()
    {
        if (CanIncrement)
        {
            AnimateValue();
            Value += Step;
            await InvokeValueChangedAsync();
        }
    }

    private async Task DecrementAsync()
    {
        if (CanDecrement)
        {
            AnimateValue();
            Value -= Step;
            await InvokeValueChangedAsync();
        }
    }

    private async Task InvokeValueChangedAsync()
    {
        if (!Context.IsDisabled && ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(Value);
        }
    }

    private void AnimateValue()
    {
        _isValueAlternated = !_isValueAlternated;
    }
}
