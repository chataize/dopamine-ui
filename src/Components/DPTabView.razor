@implements ITaggable

<CascadingValue Value="Context">
    <div class="space-y-4">
        <DPSegmentedControl IsFullWidth="@IsFullWidth" @bind-Value="_selectedTab">
            @foreach (var tab in Tabs)
            {
                <DPSegment Value="@tab">
                    @tab.Label
                </DPSegment>
            }
        </DPSegmentedControl>
        <div class="relative">
            @if (_selectedTab != null)
            {
                @(_selectedTab.ChildContent)
            }
        </div>
        @ChildContent
    </div>
</CascadingValue>

@code {
    private DPTab? _selectedTab = null;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool? IsFullWidth { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public object? Tag { get; set; }

    internal List<DPTab> Tabs { get; set; } = new();

    [CascadingParameter]
    private UIContext ParentContext { get; set; } = new();

    private UIContext Context => ParentContext with { TabView = this, IsDisabled = ParentContext.IsDisabled || IsDisabled };

    private string WidthClass
    {
        get
        {
            if (IsFullWidth == true)
            {
                return "w-full min-w-fit";
            }

            if (IsFullWidth == false)
            {
                return "w-fit";
            }

            return "w-full sm:w-fit min-w-fit";
        }
    }

    internal void AddTab(DPTab tab)
    {
        Tabs.Add(tab);

        if (_selectedTab == null)
        {
            _selectedTab = tab;
            StateHasChanged();
        }
    }
}
