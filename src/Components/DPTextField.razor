<div>
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <label for="@_id" class="label-base">
            <span class="@LabelClass">@Label</span>
            <span class="@EditIndicatorClass">‚óè</span>
        </label>
    }
    <div class="relative">
        <input id="@_id" class="@InputClass @WidthClass @CaseClass" type="@ActualInputType" placeholder="@Placeholder" size="@Size" maxlength="@MaxLength" readonly="@IsReadOnly" disabled="@(IsLoading || IsDisabled)" @bind-value="InternalValue" @bind-value:event="oninput" @onchange="OnChangeAsync" />
        @if (IsLoading)
        {
            <img src="/_content/ChatAIze.DopamineUI/img/loading.gif" width="26" height="26" class="absolute p-1 rounded-lg right-2 top-2 backdrop-blur dark:hidden" />
            <img src="/_content/ChatAIze.DopamineUI/img/loading-dark.gif" width="26" height="26" class="absolute hidden p-1 rounded-lg top-2 right-2 backdrop-blur dark:inline" />
        }
    </div>
</div>

@code {
    private readonly string _id = Random.Shared.Next().ToString();

    [Parameter]
    public TextFieldType Type { get; set; }

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? Placeholder { get; set; }

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }

    [Parameter]
    public int Size { get; set; } = 25;

    [Parameter]
    public int MaxLength { get; set; } = 100;

    [Parameter]
    public bool? IsFullWidth { get; set; }

    [Parameter]
    public bool IsLowercase { get; set; }

    [Parameter]
    public bool IsReadOnly { get; set; }

    [Parameter]
    public bool IsEdited { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    private string InternalValue
    {
        get => Value ?? string.Empty;
        set
        {
            if (IsReadOnly || IsLoading || IsDisabled)
            {
                return;
            }

            var normalizedValue = NormalizeValue(value);
            if (NormalizeValue(Value) != normalizedValue)
            {
                Value = value;

                if (ValueChanged.HasDelegate)
                {
                    ValueChanged.InvokeAsync(normalizedValue);
                }
            }
            else
            {
                Value = value;
            }
        }
    }
    private string ActualInputType
    {
        get
        {
            return Type switch
            {
                TextFieldType.Search => "search",
                TextFieldType.URL => "url",
                TextFieldType.Phone => "tel",
                TextFieldType.Email => "email",
                TextFieldType.Password => "password",
                _ => "text",
            };
        }
    }

    private string LabelClass => IsLoading || IsDisabled ? "label-disabled" : "label-default";

    private string EditIndicatorClass
    {
        get
        {
            if (IsEdited)
            {
                return IsLoading || IsDisabled ? "edit-indicator-disabled" : "edit-indicator-default";
            }

            return "edit-indicator-inactive";
        }
    }

    private string InputClass
    {
        get
        {
            if (IsLoading)
            {
                return "input-loading";
            }

            if (IsDisabled)
            {
                return "input-disabled";
            }

            return "input-default";
        }
    }

    private string CaseClass => IsLowercase ? "lowercase" : string.Empty;

    private string WidthClass
    {
        get
        {
            if (IsFullWidth == true)
            {
                return "w-full";
            }

            if (IsFullWidth == false)
            {
                return "w-fit";
            }

            return "w-full sm:w-fit";
        }
    }

    private async Task OnChangeAsync(ChangeEventArgs e)
    {
        var normalizedValue = NormalizeValue(e.Value?.ToString() ?? string.Empty);
        if (Value != normalizedValue)
        {
            Value = normalizedValue;

            if (ValueChanged.HasDelegate)
            {
                await ValueChanged.InvokeAsync(normalizedValue);
            }
        }
    }

    private string NormalizeValue(string? value)
    {
        if (value == null)
        {
            return string.Empty;
        }

        value = value.Trim();

        if (value.Length > MaxLength)
        {
            value = value.Substring(0, MaxLength);
        }

        if (IsLowercase)
        {
            value = value.ToLowerInvariant();
        }

        return value;
    }
}
