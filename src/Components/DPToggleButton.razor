<button class="@ButtonClass @WidthClass" disabled="@(IsLoading || IsDisabled)" @onclick="OnClickAsync">
    @if (IsLoading)
    {
        <span class="opacity-0">@ChildContent</span>
        <img src="/_content/ChatAIze.DopamineUI/img/loading.gif" height="24" width="24" class="absolute opacity-100 dark:opacity-0" />
        <img src="/_content/ChatAIze.DopamineUI/img/loading-dark.gif" height="24" width="24" class="absolute opacity-0 dark:opacity-100" />
    }
    else
    {
        @ChildContent
    }
</button>

@code {
    [Parameter]
    public bool Value { get; set; }

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public bool? IsFullWidth { get; set; }

    [Parameter]
    public bool IsLoading { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public object? Tag { get; set; }

    private string ButtonClass
    {
        get
        {
            if (IsLoading)
            {
                return "dp-button-loading";
            }

            if (IsDisabled)
            {
                return "dp-button-disabled";
            }

            return Value ? "dp-button-toggled" : "dp-button-default";
        }
    }

    private string WidthClass
    {
        get
        {
            if (IsFullWidth == true)
            {
                return "w-full";
            }

            if (IsFullWidth == false)
            {
                return "w-fit";
            }

            return "w-full sm:w-fit";
        }
    }

    private async Task OnClickAsync()
    {
        if (!IsLoading && !IsDisabled)
        {
            Value = !Value;

            if (ValueChanged.HasDelegate)
            {
                await ValueChanged.InvokeAsync(Value);
            }
        }
    }
}
