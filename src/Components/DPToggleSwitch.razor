<label for="@_id" class="@LabelClass @BorderClass @WidthClass">
    <input id="@_id" type="checkbox" disabled="@IsDisabled" hidden @bind="InternalValue" />
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <span>@Label</span>
    }
    <div class="group @PillClass">
        <div class="@DotClass sm:hidden" style="transform: translateX(@(Value ? "110%" : "15%"));" />
        <div class="@DotClass -sm:hidden" style="transform: translateX(@(Value ? "140%" : "25%"));" />
    </div>
</label>

@code {
    private readonly string _id = Random.Shared.Next().ToString();

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public bool Value { get; set; }

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }

    [Parameter]
    public bool? IsBorderless { get; set; }

    [Parameter]
    public bool? IsFullWidth { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    private bool InternalValue
    {
        get => Value;
        set
        {
            if (!IsDisabled && Value != value)
            {
                Value = value;

                if (ValueChanged.HasDelegate)
                {
                    ValueChanged.InvokeAsync(value);
                }
            }
        }
    }

    private string LabelClass => IsDisabled ? "switch-label-disabled group" : "switch-label-enabled group";

    private string BorderClass
    {
        get
        {
            if (IsBorderless == false)
            {
                return IsDisabled ? "frame-disabled" : "frame-enabled";
            }

            if (IsBorderless == true || string.IsNullOrWhiteSpace(Label))
            {
                return string.Empty;
            }

            return IsDisabled ? "-sm:frame-disabled" : "-sm:frame-enabled";
        }
    }

    private string PillClass
    {
        get
        {
            if (IsDisabled)
            {
                return "switch-pill-disabled";
            }

            return Value ? "switch-pill-on" : "switch-pill-off";
        }
    }

    private string DotClass
    {
        get
        {
            if (IsDisabled)
            {
                return "switch-dot-disabled";
            }

            return Value ? "switch-dot-on" : "switch-dot-off";
        }
    }

    private string WidthClass
    {
        get
        {
            if (IsFullWidth == true)
            {
                return "w-full";
            }

            if (IsFullWidth == false || string.IsNullOrWhiteSpace(Label))
            {
                return "w-fit";
            }

            return "w-full sm:w-fit";
        }
    }
}
