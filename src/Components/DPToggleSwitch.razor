<div class="space-y-3 @WidthClass">
    <label for="@_id" class="group/switch @LabelClass @BorderClass @WidthClass">
        <input id="@_id" type="checkbox" disabled="@Context.IsDisabled" hidden @bind="InternalValue" @bind:after="InvokeValueChangedAsync" />
        @if (!string.IsNullOrWhiteSpace(Label))
        {
            <span>@Label</span>
        }
        <div class="@PillClass">
            <div class="@DotClass sm:hidden" style="transform: translateX(@(Value ? "110%" : "15%"));" />
            <div class="@DotClass -sm:hidden" style="transform: translateX(@(Value ? "140%" : "25%"));" />
        </div>
    </label>
    @if (!string.IsNullOrWhiteSpace(Caption))
    {
        <div class="@CaptionClass">@Caption</div>
    }
</div>

@code {
    private readonly string _id = Random.Shared.Next().ToString();

    [CascadingParameter]
    public UIContext ParentContext { get; set; } = new();

    [Parameter]
    public string? Label { get; set; }

    [Parameter]
    public string? Caption { get; set; }

    [Parameter]
    public bool Value { get; set; }

    [Parameter]
    public EventCallback<bool> ValueChanged { get; set; }

    [Parameter]
    public bool? IsBorderless { get; set; }

    [Parameter]
    public bool? IsFullWidth { get; set; }

    [Parameter]
    public bool IsDisabled { get; set; }

    [Parameter]
    public object? Tag { get; set; }

    private UIContext Context => ParentContext with { IsDisabled = ParentContext.IsDisabled || IsDisabled };

    private bool InternalValue
    {
        get => Value;
        set
        {
            if (!Context.IsDisabled && Value != value)
            {
                Value = value;
            }
        }
    }

    private string LabelClass => Context.IsDisabled ? "dp-switch-disabled" : "dp-switch";

    private string BorderClass
    {
        get
        {
            if (IsBorderless == false)
            {
                return Context.IsDisabled ? "dp-border-disabled" : "dp-border";
            }

            if (IsBorderless == true || string.IsNullOrWhiteSpace(Label))
            {
                return string.Empty;
            }

            return Context.IsDisabled ? "-sm:dp-border-disabled" : "-sm:dp-border";
        }
    }

    private string PillClass
    {
        get
        {
            if (Context.IsDisabled)
            {
                return "dp-switch-pill-disabled";
            }

            return Value ? "dp-switch-pill-on" : "dp-switch-pill-off";
        }
    }

    private string DotClass
    {
        get
        {
            if (Context.IsDisabled)
            {
                return "dp-switch-dot-disabled";
            }

            return Value ? "dp-switch-dot-on" : "dp-switch-dot-off";
        }
    }

    private string CaptionClass
    {
        get
        {
            var captionClass = Context.IsDisabled ? "dp-caption-disabled" : "dp-caption";

            if (IsBorderless == false)
            {
                return captionClass + " px-3";
            }

            if (IsBorderless == true || string.IsNullOrWhiteSpace(Label))
            {
                return captionClass;
            }

            return captionClass + " -sm:px-3";
        }
    }

    private string WidthClass
    {
        get
        {
            if (IsFullWidth == true)
            {
                return "w-full min-w-fit";
            }

            if (IsFullWidth == false || string.IsNullOrWhiteSpace(Label))
            {
                return "w-fit";
            }

            return "w-full sm:w-fit min-w-fit";
        }
    }

    private async Task InvokeValueChangedAsync()
    {
        if (!Context.IsDisabled && ValueChanged.HasDelegate)
        {
            await ValueChanged.InvokeAsync(Value);
        }
    }
}
